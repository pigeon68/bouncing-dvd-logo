document.addEventListener('DOMContentLoaded', () => {
    // Create the logo image element
    const logo = document.createElement('img');
    document.body.appendChild(logo);
    
    // Set initial properties of the logo
    logo.src = 'logos/dvdlogo-01.svg'; // Path to the initial logo
    logo.alt = 'DVD Logo';
    
    // Set initial size of the logo
    logo.style.position = 'absolute';
    logo.style.width = '27vw';  // Set the logo size to 20% of viewport width
    logo.style.height = 'auto'; // Maintain aspect ratio

    // Array of logos to cycle through
    const logos = [
        'logos/dvdlogo-01.svg',
        'logos/dvdlogo-02.svg',
        'logos/dvdlogo-03.svg',
        'logos/dvdlogo-04.svg',
        'logos/dvdlogo-05.svg',
        'logos/dvdlogo-06.svg',
        'logos/dvdlogo-07.svg'
    ];
    let logoIndex = 0;  // Initial logo index

    // Variables to store position and speed
    let x = Math.random() * (window.innerWidth - logo.offsetWidth);  // Random initial X position
    let y = Math.random() * (window.innerHeight - logo.offsetHeight);  // Random initial Y position
    let dx = 3;  // Speed on X-axis
    let dy = 3;  // Speed on Y-axis

    // Function to animate the logo and handle the bouncing effect
    function animate() {
        x += dx;  // Update the position on the X-axis
        y += dy;  // Update the position on the Y-axis

        const windowHeight = window.innerHeight;  // Get the current window height

        // Check if the logo hits the left or right edge
        if (x <= 0 || x >= window.innerWidth - logo.offsetWidth) {
            dx = -dx;  // Reverse direction on the X-axis
            cycleLogo();  // Cycle to the next logo when hitting a side
        }

        // Check if the logo hits the top edge
        if (y <= 0) {
            dy = -dy;  // Reverse direction on the Y-axis
            cycleLogo();  // Cycle to the next logo when hitting the top
        }

        // Check if the logo hits the bottom edge dynamically
        if (y + logo.offsetHeight >= windowHeight) {
            y = windowHeight - logo.offsetHeight;  // Adjust Y position to stay within bounds
            dy = -dy;  // Reverse direction on the Y-axis
            cycleLogo();  // Cycle to the next logo when hitting the bottom
        }

        // Update the logo's position on the page
        logo.style.left = `${x}px`;
        logo.style.top = `${y}px`;

        // Request the next animation frame
        requestAnimationFrame(animate);
    }

    // Function to cycle through the logos
    function cycleLogo() {
        logoIndex = (logoIndex + 1) % logos.length;  // Increment index and loop back to the start
        logo.src = logos[logoIndex];  // Change the logo source
    }

    // Add a resize event listener to maintain logo's position and movement
    window.addEventListener('resize', () => {
        // Get the new window height and update the logo's size
        const windowHeight = window.innerHeight;
        logo.style.width = '20vw';  // Keep the logo width as a percentage of the viewport width
        logo.style.height = 'auto'; // Maintain aspect ratio

        // Ensure the logo's position and speed are not reset during resize
    });

    // Start the animation loop
    animate();
});
